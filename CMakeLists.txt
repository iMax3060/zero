# The root CMakeLists.txt
# All cmake files were initially generated by am2cmake with lots of manual edits.

# This root file specifies project-wide settings and compiler settings,
# which were placed in root Makefile.am and Makefile.generic in original ShoreMT.

IF(POLICY CMP0048)
    CMAKE_POLICY(SET CMP0048 NEW)
ENDIF(POLICY CMP0048)

# The Project "Zero" contains the languages C (?) and C++:
PROJECT(Zero VERSION 0.1.0 LANGUAGES C CXX)

# The lowest version of CMake supprted by this project is 3.9:
CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

# Load the project specific CMake modules:
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/cmake/Modules/")

MESSAGE(STATUS)
MESSAGE(STATUS "========================================================")
MESSAGE(STATUS "OS Kernel:         ${CMAKE_SYSTEM}")
MESSAGE(STATUS "CPU Architecture:  ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "C-Compiler         ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION} at ${CMAKE_C_COMPILER}")
MESSAGE(STATUS "C++-Compiler:      ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} at ${CMAKE_CXX_COMPILER}")
MESSAGE(STATUS "========================================================")
MESSAGE(STATUS)

MESSAGE(STATUS "Check if it's a 64bit system")
IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES ".*64.*")
    MESSAGE(STATUS "Check if it's a 64bit system - yes")
ELSE(${CMAKE_SYSTEM_PROCESSOR} MATCHES ".*64.*")
    MESSAGE(STATUS "Check if it's a 64bit system - no")
    MESSAGE(FATAL_ERROR "Foster B-tree can only be built on 64bit OS/CPU. Your system seems to be '${CMAKE_SYSTEM_PROCESSOR}'")
    RETURN()
ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES ".*64.*")

# Generate a database with the exact compiler calls for all translation units of the project in machine readable format:
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
MESSAGE(STATUS "INFO: The exact compiler calls for all translation units of ${CMAKE_PROJECT_NAME} can be found at ${PROJECT_BINARY_DIR}/compile_commands.json.")

# Set the used C++-Standard:
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED YES)
SET(CMAKE_CXX_EXTENSIONS OFF)

# Suppress the full output (e.g. incl. full compiler calls) of the makefile:
SET(CMAKE_VERBOSE_MAKEFILE OFF)

# Set CMAKE_BUILD_TYPE specific settings:
INCLUDE(SetUpConfigurations)

# Allow the usage of pthreads:
SET(THREADS_PREFER_PTHREAD_FLAG ON)
FIND_PACKAGE(Threads REQUIRED)

## _REENTRANT and _POSIX_PTHREAD_SEMANTICS are needed on Solaris to ensure
# that the posix-compliant clib interfaces are there (e.g., ctime_r)
# (Actually, you're supposed to get them both with _POSIX_C_SOURCE > 199506L
# but I'm not that trusting.)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS _REENTRANT _POSIX_PTHREAD_SEMANTICS)

# libprofiler x86_64 has some issue on libunwind.
# it's so ugly and hard to fix. Just give up using libprofiler on some platform.
# http://code.google.com/p/google-perftools/issues/detail?id=66&can=1&q=libunwind
# Enable compilation with gperftools' profiler and tcmalloc:
FIND_PACKAGE(gperftools)
IF(gperftools_FOUND)
    LINK_LIBRARIES(gperftools::gperftools)
ELSE(gperftools_FOUND)
    MESSAGE(STATUS "INFO: How to install gperftools: https://github.com/gperftools/gperftools")
ENDIF(gperftools_FOUND)

FIND_PACKAGE(TCMALLOC)
IF(TCMALLOC_FOUND)
    # Disabled tcmalloc because the memory acquired by tcmalloc is somehow slower to access.
    # LINK_LIBRARIES(TCMALLOC::TCMALLOC)
ELSE(TCMALLOC_FOUND)
    MESSAGE(AUTHOR_WARNING "Use the probably slower build-in malloc as fallback. For information how to install: https://github.com/gperftools/gperftools")
ENDIF(TCMALLOC_FOUND)

FIND_PACKAGE(NUMA)
IF(NOT NUMA_FOUND)
    MESSAGE(STATUS "INFO: How to install numa: http://oss.sgi.com/projects/libnuma/")
ENDIF(NOT NUMA_FOUND)

FIND_PACKAGE(Boost 1.4.8 REQUIRED COMPONENTS program_options system thread atomic filesystem regex)

FIND_PACKAGE(LibRT REQUIRED)

FIND_PACKAGE(LibCDS REQUIRED)

# Enable testing using CTest (run "make test"):
ENABLE_TESTING()

# Define a bunch of environment specific macros. This replaces the old autoconf/autoheader stuffs:
INCLUDE(ExistenceChecks)

INCLUDE(CheckTypeSize)

# Check the (OS-dependent) size of pthread handlers (used in some places of the code):
SET(CMAKE_EXTRA_INCLUDE_FILES "pthread.h")
CHECK_TYPE_SIZE(pthread_t SIZEOF_PTHREAD_T)
SET(CMAKE_EXTRA_INCLUDE_FILES)

# Set the hard-coded page size in bytes (has to be power of 2 and between 1kb and 256kb):
SET(SM_PAGESIZE 8192)

# Number of bits used for dreadlocks:
SET(SM_DREADLOCK_BITCOUNT 256)
# Number of bits used for the dreadlock identity:
SET(SM_DREADLOCK_FINGERS 3)

# Enable/disable the usage of pthread mutexes:
SET(USE_PTHREAD_MUTEX "true")

# Check the OS and CPU-architecture:
SET(ARCH_LP64  "true") # so far, always assume 64 bits
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    SET(Linux "true")
ENDIF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
IF(CMAKE_SYSTEM_NAME MATCHES "(Solaris|SunOS)")
    MESSAGE(FATAL_ERROR "We no longer support Solaris!")
    RETURN()
ENDIF(CMAKE_SYSTEM_NAME MATCHES "(Solaris|SunOS)")
IF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    MESSAGE(FATAL_ERROR "We no longer support macOS!")
    RETURN()
ENDIF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    SET(x86_64 "true")
    SET(amd64 "true") # maybe additional check needed. but now they are almost synonyms
ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "sparc")
    MESSAGE(FATAL_ERROR "We no longer support SPARC!")
    RETURN()
ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "sparc")

# Test if the system is big endian or if it's little endian:
INCLUDE(TestBigEndian)
TEST_BIG_ENDIAN(WORDS_BIGENDIAN)

# Set the page evictioner used by the buffer pool:
SET(PAGE_EVICTIONER ON CACHE STRING "Page Evictioner used by the Buffer Pool")
IF(PAGE_EVICTIONER STREQUAL "PageEvictionerLOOPAbsolutelyAccurate")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLOOPAbsolutelyAccurate!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLOOPPracticallyAccurate")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLOOPPracticallyAccurate!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLOOPThreadLocallyAccurate")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLOOPThreadLocallyAccurate!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerDafaultRandom")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerDafaultRandom!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerFastRand")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerFastRand!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerCLOCKFix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerCLOCKFix!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerCLOCKUnfix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerCLOCKUnfix!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerCLOCKFixUnfix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerCLOCKFixUnfix!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerGCLOCKV1Fix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerGCLOCKV1Fix!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerGCLOCKV2Fix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerGCLOCKV2Fix!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerDGCLOCKV1Fix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerDGCLOCKV1Fix!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerDGCLOCKV2Fix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerDGCLOCKV2Fix!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerFIFOLowContention")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerFIFOLowContention!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerFIFOHighContention")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerFIFOHighContention!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerFILOLowContention")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerFILOLowContention!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLRU")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLRU!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerSLRU")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerSLRU!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLRU2")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLRU2!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLRU3")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLRU3!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLRU4")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLRU4!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerMRU")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerMRU!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerTimestampLRU")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerTimestampLRU!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerTimestampLRU2")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerTimestampLRU2!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerTimestampLRU3")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerTimestampLRU3!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerTimestampLRU4")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerTimestampLRU4!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLFU")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLFU!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLFUDA")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLFUDA!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLRDV1")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLRDV1!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLRDV2Subtraction")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLRDV2Subtraction!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLRDV2Multiplication")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLRDV2Multiplication!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMDefault")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMDefault!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMFastRand")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMFastRand!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMMinstdRand0")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMMinstdRand0!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMMinstdRand")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMMinstdRand!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMMT19937")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMMT19937!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMMT19937_64")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMMT19937_64!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMRanlux24Base")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMRanlux24Base!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMRanlux48Base")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMRanlux48Base!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMRanlux24")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMRanlux24!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMRanlux48")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMRanlux48!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMKnuthB")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMKnuthB!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMCRand")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMCRand!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostMinstdRand0")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostMinstdRand0!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostMinstdRand")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostMinstdRand!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRand48")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRand48!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostEcuyer1988")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostEcuyer1988!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostKnuthB")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostKnuthB!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostKreutzer1986")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostKreutzer1986!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostTaus88")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostTaus88!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostHellekalek1995")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostHellekalek1995!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostMT11213b")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostMT11213b!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostMT19937")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostMT19937!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostMT19937_64")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostMT19937_64!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci607")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci607!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci1279")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci1279!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci2281")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci2281!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci3217")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci3217!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci4423")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci4423!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci9689")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci9689!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci19937")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci19937!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci23209")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci23209!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostLaggedFibonacci44497")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostLaggedFibonacci44497!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux3")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux3!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux4")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux4!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux64_3")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux64_3!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux64_4")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux64_4!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux3_01")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux3_01!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux4_01")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux4_01!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux64_4_01")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux64_4_01!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux24")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux24!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMBoostRanlux48")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMBoostRanlux48!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMXORShift32")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMXORShift32!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMXORShift64")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMXORShift64!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMXORShift96")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMXORShift96!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMXORShift128")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMXORShift128!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMXORWow")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMXORWow!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMXORShift64Star")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMXORShift64Star!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerRANDOMXORShift128Plus")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerRANDOMXORShift128Plus!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerCARFix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerCARFix!")
ELSEIF(PAGE_EVICTIONER STREQUAL "PageEvictionerCARUnfix")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerCARUnfix!")
ELSE(PAGE_EVICTIONER STREQUAL "PageEvictionerLOOPAbsolutelyAccurate")
    SET(PAGE_EVICTIONER "PageEvictionerLOOPPracticallyAccurate")
    MESSAGE(WARNING "The set page evictioner is unknown. Changed to the default page evictioner!")
    MESSAGE(STATUS "INFO: The selected page evictioner is PageEvictionerLOOPPracticallyAccurate!")
ENDIF(PAGE_EVICTIONER STREQUAL "PageEvictionerLOOPAbsolutelyAccurate")

# Then finally call CONFIGURE_FILE to generate shore-config-env.h:
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/config/shore-config-env.h.cmake ${CMAKE_BINARY_DIR}/config/shore-config-env.h)

ADD_SUBDIRECTORY(src) # main source codes
ADD_SUBDIRECTORY(config) # to be eliminated
ADD_SUBDIRECTORY(tests) # unit testcases

INCLUDE(SetUpDoxygen)
