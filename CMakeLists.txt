# The root CMakeLists.txt
# All cmake files were initially generated by am2cmake with lots of manual edits.

# This root file specifies project-wide settings and compiler settings,
# which were placed in root Makefile.am and Makefile.generic in original ShoreMT.

# The Project "Zero" contains the languages C (?) and C++:
PROJECT(Zero C CXX)

# Version number of "Zero":
SET(ZERO_VERSION_MAJOR 0)
SET(ZERO_VERSION_MINOR 1)
SET(ZERO_VERSION_PATCH 0)
SET(ZERO_VERSION "${ZERO_VERSION_MAJOR}.${ZERO_VERSION_MINOR}.${ZERO_VERSION_PATCH}")

# The lowest version of CMake supprted by this project is 3.9:
CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

# Load the project specific CMake modules:
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/cmake/Modules/")

MESSAGE(STATUS)
MESSAGE(STATUS "========================================================")
MESSAGE(STATUS "OS Kernel:         ${CMAKE_SYSTEM}")
MESSAGE(STATUS "CPU Architecture:  ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "C-Compiler         ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION} at ${CMAKE_C_COMPILER}")
MESSAGE(STATUS "C++-Compiler:      ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} at ${CMAKE_CXX_COMPILER}")
MESSAGE(STATUS "========================================================")
MESSAGE(STATUS)

MESSAGE(STATUS "Check if it's a 64bit system")
IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES ".*64.*")
    MESSAGE(STATUS "Check if it's a 64bit system - yes")
ELSE(${CMAKE_SYSTEM_PROCESSOR} MATCHES ".*64.*")
    MESSAGE(STATUS "Check if it's a 64bit system - no")
    MESSAGE(FATAL_ERROR "Foster B-tree can only be built on 64bit OS/CPU. Your system seems to be '${CMAKE_SYSTEM_PROCESSOR}'")
    RETURN()
ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES ".*64.*")

# Generate a database with the exact compiler calls for all translation units of the project in machine readable format:
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
MESSAGE(STATUS "INFO: The exact compiler calls for all translation units of ${CMAKE_PROJECT_NAME} can be found at ${PROJECT_BINARY_DIR}/compile_commands.json.")

# Set the used C++-Standard:
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED YES)
SET(CMAKE_CXX_EXTENSIONS OFF)

# Suppress the full output (e.g. incl. full compiler calls) of the makefile:
SET(CMAKE_VERBOSE_MAKEFILE OFF)

# Set CMAKE_BUILD_TYPE specific settings:
INCLUDE(SetUpConfigurations)

# Allow the usage of pthreads:
SET(THREADS_PREFER_PTHREAD_FLAG ON)
FIND_PACKAGE(Threads REQUIRED)

## _REENTRANT and _POSIX_PTHREAD_SEMANTICS are needed on Solaris to ensure
# that the posix-compliant clib interfaces are there (e.g., ctime_r)
# (Actually, you're supposed to get them both with _POSIX_C_SOURCE > 199506L
# but I'm not that trusting.)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS _REENTRANT _POSIX_PTHREAD_SEMANTICS)

# libprofiler x86_64 has some issue on libunwind.
# it's so ugly and hard to fix. Just give up using libprofiler on some platform.
# http://code.google.com/p/google-perftools/issues/detail?id=66&can=1&q=libunwind
# Enable compilation with gperftools' profiler and tcmalloc:
FIND_PACKAGE(gperftools)
IF(gperftools_FOUND)
    LINK_LIBRARIES(gperftools::gperftools)
ELSE(gperftools_FOUND)
    MESSAGE(STATUS "INFO: How to install gperftools: https://github.com/gperftools/gperftools")
ENDIF(gperftools_FOUND)

FIND_PACKAGE(TCMALLOC)
IF(TCMALLOC_FOUND)
    # Disabled tcmalloc because the memory acquired by tcmalloc is somehow slower to access.
    # LINK_LIBRARIES(TCMALLOC::TCMALLOC)
ELSE(TCMALLOC_FOUND)
    MESSAGE(AUTHOR_WARNING "Use the probably slower build-in malloc as fallback. For information how to install: https://github.com/gperftools/gperftools")
ENDIF(TCMALLOC_FOUND)

FIND_PACKAGE(NUMA)
IF(NOT NUMA_FOUND)
    MESSAGE(STATUS "INFO: How to install numa: http://oss.sgi.com/projects/libnuma/")
ENDIF(NOT NUMA_FOUND)

FIND_PACKAGE(Boost 1.4.8 REQUIRED COMPONENTS program_options system thread atomic filesystem regex)

FIND_PACKAGE(LibRT REQUIRED)

FIND_PACKAGE(LibCDS REQUIRED)

# Enable testing using CTest (run "make test"):
ENABLE_TESTING()

# Define a bunch of environment specific macros. This replaces the old autoconf/autoheader stuffs:
INCLUDE(ExistenceChecks)

INCLUDE(CheckTypeSize)

# Check the (OS-dependent) size of pthread handlers (used in some places of the code):
SET(CMAKE_EXTRA_INCLUDE_FILES "pthread.h")
CHECK_TYPE_SIZE(pthread_t SIZEOF_PTHREAD_T)
SET(CMAKE_EXTRA_INCLUDE_FILES)

# Set the hard-coded page size in bytes (has to be power of 2 and between 1kb and 256kb):
SET(SM_PAGESIZE 8192)

# Number of bits used for dreadlocks:
SET(SM_DREADLOCK_BITCOUNT 256)
# Number of bits used for the dreadlock identity:
SET(SM_DREADLOCK_FINGERS 3)

# Enable/disable the usage of pthread mutexes:
SET(USE_PTHREAD_MUTEX "true")

# Check the OS and CPU-architecture:
SET(ARCH_LP64  "true") # so far, always assume 64 bits
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    SET(Linux "true")
ENDIF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
IF(CMAKE_SYSTEM_NAME MATCHES "(Solaris|SunOS)")
    MESSAGE(FATAL_ERROR "We no longer support Solaris!")
    RETURN()
ENDIF(CMAKE_SYSTEM_NAME MATCHES "(Solaris|SunOS)")
IF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    MESSAGE(FATAL_ERROR "We no longer support macOS!")
    RETURN()
ENDIF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    SET(x86_64 "true")
    SET(amd64 "true") # maybe additional check needed. but now they are almost synonyms
ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "sparc")
    MESSAGE(FATAL_ERROR "We no longer support SPARC!")
    RETURN()
ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "sparc")

# Test if the system is big endian or if it's little endian:
INCLUDE(TestBigEndian)
TEST_BIG_ENDIAN(WORDS_BIGENDIAN)

# Then finally call CONFIGURE_FILE to generate shore-config-env.h:
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/config/shore-config-env.h.cmake ${CMAKE_BINARY_DIR}/config/shore-config-env.h)

ADD_SUBDIRECTORY(src) # main source codes
ADD_SUBDIRECTORY(config) # to be eliminated
ADD_SUBDIRECTORY(tests) # unit testcases

INCLUDE(SetUpDoxygen)
